{"version":3,"sources":["components/SearchBar.jsx","components/AddMovie.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","renderFirstInput","bind","renderSecondInput","renderThirdInput","this","props","searchText","onSearchTextChange","data-testid","htmlFor","type","value","onChange","id","bookmarkedOnly","onBookmarkedChange","checked","selectedGenre","onSelectedGenreChange","React","Component","defaultProps","AddMovie","handleChange","handleButton","state","subtitle","title","imagePath","storyline","rating","genre","target","name","setState","onClick","labelTitle","labelId","inputName","inputId","renderInput","renderSelect","Header","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAGMA,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAJZ,E,+DAQM,IAAD,EAIbG,KAAKC,MAFPC,EAFe,EAEfA,WACAC,EAHe,EAGfA,mBAGF,OACE,2BAAOC,cAAY,mBAAmBC,QAAQ,QAA9C,kBACA,2BACEC,KAAK,OAAOC,MAAOL,EACnBM,SAAUL,EACVC,cAAY,aAAaK,GAAG,Y,0CAMb,IAAD,EAIdT,KAAKC,MAFPS,EAFgB,EAEhBA,eACAC,EAHgB,EAGhBA,mBAEF,OACE,2BAAOP,cAAY,uBAAuBC,QAAQ,YAAlD,4BACE,2BACEC,KAAK,WACLM,QAASF,EACTF,SAAUG,EACVP,cAAY,iBACZK,GAAG,gB,yCAMS,IAAD,EAIbT,KAAKC,MAFPY,EAFe,EAEfA,cACAC,EAHe,EAGfA,sBAGF,OACE,2BAAOV,cAAY,qBAAqBC,QAAQ,UAAhD,wBACE,4BACEE,MAAOM,EACPL,SAAUM,EACVV,cAAY,gBAEZ,4BAAQG,MAAM,GAAGH,cAAY,iBAA7B,SACA,4BAAQG,MAAM,SAASH,cAAY,iBAAnC,cACA,4BAAQG,MAAM,SAASH,cAAY,iBAAnC,cACA,4BAAQG,MAAM,WAAWH,cAAY,iBAArC,gB,+BAON,OACE,0BAAMA,cAAY,mBAEfJ,KAAKJ,mBAELI,KAAKF,oBAELE,KAAKD,wB,GA1EUgB,IAAMC,WAyF9BrB,EAAUsB,aAAe,CACvBf,WAAY,GACZC,mBAAoB,GACpBO,eAAgB,GAChBC,mBAAoB,GACpBE,cAAe,GACfC,sBAAuB,IAGVnB,Q,QCNAuB,E,kDA3Fb,aAAe,IAAD,8BACZ,gBAEKC,aAAe,EAAKA,aAAatB,KAAlB,gBACpB,EAAKuB,aAAe,EAAKA,aAAavB,KAAlB,gBAEpB,EAAKwB,MAAQ,CACXC,SAAU,GACVC,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,OAAQ,EACRC,MAAO,UAZG,E,4DAgBY,IAAXC,EAAU,EAAVA,OACLC,EAASD,EAATC,KACR7B,KAAK8B,SAAL,eAAiBD,EAAOD,EAAOrB,U,sCAK/BwB,EADoB/B,KAAKC,MAAjB8B,SACA/B,KAAKqB,OACbrB,KAAK8B,SAAS,CACZR,SAAU,GACVC,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,OAAQ,EACRC,MAAO,a,qCAIK,IACNA,EAAU3B,KAAKqB,MAAfM,MACR,OACE,6BACE,2BAAOvB,cAAY,oBAAoBC,QAAQ,SAA/C,YAEE,4BACED,cAAY,cACZG,MAAOoB,EACPnB,SAAUR,KAAKmB,aACfV,GAAG,QACHoB,KAAK,SAEL,4BAAQzB,cAAY,eAAeG,MAAM,UAAzC,cACA,4BAAQH,cAAY,eAAeG,MAAM,UAAzC,cACA,4BAAQH,cAAY,eAAeG,MAAM,YAAzC,iB,kCAOEyB,EAAYC,EAASC,EAAWC,EAASd,EAAOf,GAC1D,OACE,2BAAOF,cAAa6B,EAAS5B,QAAS6B,GACnCF,EACD,2BACE5B,cAAa+B,EACbN,KAAMK,EACN5B,KAAMA,EACNC,MAAOc,EACPb,SAAUR,KAAKmB,aACfV,GAAIyB,O,+BAOF,IAAD,EACmDlC,KAAKqB,MAAvDE,EADD,EACCA,MAAOD,EADR,EACQA,SAAUE,EADlB,EACkBA,UAAWC,EAD7B,EAC6BA,UAAWC,EADxC,EACwCA,OAC/C,OACE,0BAAMtB,cAAY,kBACfJ,KAAKoC,YAAY,YAAU,oBAAqB,QAAS,cAAeb,EAAO,QADlF,IAEGvB,KAAKoC,YAAY,eAAa,uBAAwB,WAAY,iBAAkBd,EAAU,QAFjG,IAGGtB,KAAKoC,YAAY,SAAU,oBAAqB,YAAa,cAAeZ,EAAW,QAH1F,IAIGxB,KAAKoC,YAAY,UAAW,wBAAyB,YAAa,kBAAmBX,EAAW,YAJnG,IAKGzB,KAAKoC,YAAY,kBAAa,qBAAsB,SAAU,eAAgBV,EAAQ,UALzF,IAMG1B,KAAKqC,eANR,IAOE,4BAAQjC,cAAY,cAAc2B,QAAS/B,KAAKoB,cAAhD,wB,GApFeL,IAAMC,WCSdsB,G,6KARX,OACE,4BAAQC,UAAU,qBAChB,wBAAIA,UAAU,cAAd,4B,GAJaxB,IAAMC,YCkBZwB,MAbf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKD,UAAU,OAAf,QAEE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8247cd3b.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  constructor() {\n    super();\n    this.renderFirstInput = this.renderFirstInput.bind(this);\n    this.renderSecondInput = this.renderSecondInput.bind(this);\n    this.renderThirdInput = this.renderThirdInput.bind(this);\n  }\n\n\n  renderFirstInput() {\n    const {\n      searchText,\n      onSearchTextChange,\n    } = this.props;\n\n    return (\n      <label data-testid=\"text-input-label\" htmlFor=\"text\">Inclui o texto:\n      <input\n        type=\"text\" value={searchText}\n        onChange={onSearchTextChange}\n        data-testid=\"text-input\" id=\"text\"\n      />\n      </label>\n    );\n  }\n\n  renderSecondInput() {\n    const {\n      bookmarkedOnly,\n      onBookmarkedChange,\n    } = this.props;\n    return (\n      <label data-testid=\"checkbox-input-label\" htmlFor=\"checkbox\">Mostrar somente favoritos\n        <input\n          type=\"checkbox\"\n          checked={bookmarkedOnly}\n          onChange={onBookmarkedChange}\n          data-testid=\"checkbox-input\"\n          id=\"checkbox\"\n        />\n      </label>\n    );\n  }\n\n  renderThirdInput() {\n    const {\n      selectedGenre,\n      onSelectedGenreChange,\n    } = this.props;\n\n    return (\n      <label data-testid=\"select-input-label\" htmlFor=\"select\">Filtrar por gênero\n        <select\n          value={selectedGenre}\n          onChange={onSelectedGenreChange}\n          data-testid=\"select-input\"\n        >\n          <option value=\"\" data-testid=\"select-option\">Todos</option>\n          <option value=\"action\" data-testid=\"select-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"select-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"select-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <form data-testid=\"search-bar-form\">\n\n        {this.renderFirstInput()}\n\n        {this.renderSecondInput()}\n\n        {this.renderThirdInput()}\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: propTypes.string,\n  onSearchTextChange: propTypes.func,\n  bookmarkedOnly: propTypes.bool,\n  onBookmarkedChange: propTypes.func,\n  selectedGenre: propTypes.string,\n  onSelectedGenreChange: propTypes.func,\n};\n\nSearchBar.defaultProps = {\n  searchText: '',\n  onSearchTextChange: '',\n  bookmarkedOnly: '',\n  onBookmarkedChange: '',\n  selectedGenre: '',\n  onSelectedGenreChange: '',\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport propType from 'prop-types';\n\nclass AddMovie extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n  }\n\n  handleChange({ target }) {\n    const { name } = target;\n    this.setState({ [name]: target.value });\n  }\n\n  handleButton() {\n    const { onClick } = this.props;\n    onClick(this.state);\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n\n  renderSelect() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label data-testid=\"genre-input-label\" htmlFor=\"genre\">\nGênero\n          <select\n            data-testid=\"genre-input\"\n            value={genre}\n            onChange={this.handleChange}\n            id=\"genre\"\n            name=\"genre\"\n          >\n            <option data-testid=\"genre-option\" value=\"action\">Ação</option>\n            <option data-testid=\"genre-option\" value=\"comedy\">Comédia</option>\n            <option data-testid=\"genre-option\" value=\"thriller\">Suspense</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderInput(labelTitle, labelId, inputName, inputId, state, type) {\n    return (\n      <label data-testid={labelId} htmlFor={inputName}>\n        {labelTitle}\n        <input\n          data-testid={inputId}\n          name={inputName}\n          type={type}\n          value={state}\n          onChange={this.handleChange}\n          id={inputName}\n        />\n      </label>\n    );\n  }\n\n\n  render() {\n    const { title, subtitle, imagePath, storyline, rating } = this.state;\n    return (\n      <form data-testid=\"add-movie-form\">\n        {this.renderInput('Título', 'title-input-label', 'title', 'title-input', title, 'type')};\n        {this.renderInput('Subtítulo', 'subtitle-input-label', 'subtitle', 'subtitle-input', subtitle, 'type')};\n        {this.renderInput('Imagem', 'image-input-label', 'imagePath', 'image-input', imagePath, 'type')};\n        {this.renderInput('Sinopse', 'storyline-input-label', 'storyline', 'storyline-input', storyline, 'textarea')};\n        {this.renderInput('Avaliação', 'rating-input-label', 'rating', 'rating-input', rating, 'number')};\n        {this.renderSelect()};\n        <button data-testid=\"send-button\" onClick={this.handleButton}>Adicionar filme</button>\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = { onClick: propType.func.isRequired };\n\nexport default AddMovie;\n","import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport SearchBar from './components/SearchBar';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        teste\n        <Header />\n        <SearchBar />\n        <AddMovie />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}